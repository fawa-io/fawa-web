// Copyright 2025 The fawa Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/fawa/greet/v1/hello.proto (package proto.fawa.greet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.fawa.greet.v1.SayHelloRequest
 */
export class SayHelloRequest extends Message<SayHelloRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SayHelloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.SayHelloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SayHelloRequest {
    return new SayHelloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SayHelloRequest {
    return new SayHelloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SayHelloRequest {
    return new SayHelloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SayHelloRequest | PlainMessage<SayHelloRequest> | undefined, b: SayHelloRequest | PlainMessage<SayHelloRequest> | undefined): boolean {
    return proto3.util.equals(SayHelloRequest, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.SayHelloResponse
 */
export class SayHelloResponse extends Message<SayHelloResponse> {
  /**
   * @generated from field: string resp = 1;
   */
  resp = "";

  constructor(data?: PartialMessage<SayHelloResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.SayHelloResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SayHelloResponse {
    return new SayHelloResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SayHelloResponse {
    return new SayHelloResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SayHelloResponse {
    return new SayHelloResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SayHelloResponse | PlainMessage<SayHelloResponse> | undefined, b: SayHelloResponse | PlainMessage<SayHelloResponse> | undefined): boolean {
    return proto3.util.equals(SayHelloResponse, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.GreetStreamRequest
 */
export class GreetStreamRequest extends Message<GreetStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GreetStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.GreetStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetStreamRequest {
    return new GreetStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetStreamRequest {
    return new GreetStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetStreamRequest {
    return new GreetStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GreetStreamRequest | PlainMessage<GreetStreamRequest> | undefined, b: GreetStreamRequest | PlainMessage<GreetStreamRequest> | undefined): boolean {
    return proto3.util.equals(GreetStreamRequest, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.GreetStreamResponse
 */
export class GreetStreamResponse extends Message<GreetStreamResponse> {
  /**
   * A single part of a greeting.
   *
   * @generated from field: string part = 1;
   */
  part = "";

  constructor(data?: PartialMessage<GreetStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.GreetStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "part", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetStreamResponse {
    return new GreetStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetStreamResponse {
    return new GreetStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetStreamResponse {
    return new GreetStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GreetStreamResponse | PlainMessage<GreetStreamResponse> | undefined, b: GreetStreamResponse | PlainMessage<GreetStreamResponse> | undefined): boolean {
    return proto3.util.equals(GreetStreamResponse, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.GreetClientStreamRequest
 */
export class GreetClientStreamRequest extends Message<GreetClientStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GreetClientStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.GreetClientStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetClientStreamRequest {
    return new GreetClientStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetClientStreamRequest {
    return new GreetClientStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetClientStreamRequest {
    return new GreetClientStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GreetClientStreamRequest | PlainMessage<GreetClientStreamRequest> | undefined, b: GreetClientStreamRequest | PlainMessage<GreetClientStreamRequest> | undefined): boolean {
    return proto3.util.equals(GreetClientStreamRequest, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.GreetClientStreamResponse
 */
export class GreetClientStreamResponse extends Message<GreetClientStreamResponse> {
  /**
   * A summary of all the greetings.
   *
   * @generated from field: string summary = 1;
   */
  summary = "";

  constructor(data?: PartialMessage<GreetClientStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.GreetClientStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetClientStreamResponse {
    return new GreetClientStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetClientStreamResponse {
    return new GreetClientStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetClientStreamResponse {
    return new GreetClientStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GreetClientStreamResponse | PlainMessage<GreetClientStreamResponse> | undefined, b: GreetClientStreamResponse | PlainMessage<GreetClientStreamResponse> | undefined): boolean {
    return proto3.util.equals(GreetClientStreamResponse, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.GreetBidiStreamRequest
 */
export class GreetBidiStreamRequest extends Message<GreetBidiStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GreetBidiStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.GreetBidiStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetBidiStreamRequest {
    return new GreetBidiStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetBidiStreamRequest {
    return new GreetBidiStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetBidiStreamRequest {
    return new GreetBidiStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GreetBidiStreamRequest | PlainMessage<GreetBidiStreamRequest> | undefined, b: GreetBidiStreamRequest | PlainMessage<GreetBidiStreamRequest> | undefined): boolean {
    return proto3.util.equals(GreetBidiStreamRequest, a, b);
  }
}

/**
 * @generated from message proto.fawa.greet.v1.GreetBidiStreamResponse
 */
export class GreetBidiStreamResponse extends Message<GreetBidiStreamResponse> {
  /**
   * An echo of the request.
   *
   * @generated from field: string echo = 1;
   */
  echo = "";

  constructor(data?: PartialMessage<GreetBidiStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.greet.v1.GreetBidiStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "echo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetBidiStreamResponse {
    return new GreetBidiStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetBidiStreamResponse {
    return new GreetBidiStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetBidiStreamResponse {
    return new GreetBidiStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GreetBidiStreamResponse | PlainMessage<GreetBidiStreamResponse> | undefined, b: GreetBidiStreamResponse | PlainMessage<GreetBidiStreamResponse> | undefined): boolean {
    return proto3.util.equals(GreetBidiStreamResponse, a, b);
  }
}

