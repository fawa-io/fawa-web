// Copyright 2025 The fawa Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/fawa/file/v1/file.proto (package proto.fawa.file.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.fawa.file.v1.SendFileRequest
 */
export class SendFileRequest extends Message<SendFileRequest> {
  /**
   * @generated from oneof proto.fawa.file.v1.SendFileRequest.payload
   */
  payload: {
    /**
     * @generated from field: string file_name = 1;
     */
    value: string;
    case: "fileName";
  } | {
    /**
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SendFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.file.v1.SendFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendFileRequest {
    return new SendFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendFileRequest {
    return new SendFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendFileRequest {
    return new SendFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendFileRequest | PlainMessage<SendFileRequest> | undefined, b: SendFileRequest | PlainMessage<SendFileRequest> | undefined): boolean {
    return proto3.util.equals(SendFileRequest, a, b);
  }
}

/**
 * @generated from message proto.fawa.file.v1.SendFileResponse
 */
export class SendFileResponse extends Message<SendFileResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<SendFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.file.v1.SendFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendFileResponse {
    return new SendFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendFileResponse {
    return new SendFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendFileResponse {
    return new SendFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendFileResponse | PlainMessage<SendFileResponse> | undefined, b: SendFileResponse | PlainMessage<SendFileResponse> | undefined): boolean {
    return proto3.util.equals(SendFileResponse, a, b);
  }
}

/**
 * @generated from message proto.fawa.file.v1.ReceiveFileRequest
 */
export class ReceiveFileRequest extends Message<ReceiveFileRequest> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName = "";

  constructor(data?: PartialMessage<ReceiveFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.file.v1.ReceiveFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceiveFileRequest {
    return new ReceiveFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceiveFileRequest {
    return new ReceiveFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceiveFileRequest {
    return new ReceiveFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReceiveFileRequest | PlainMessage<ReceiveFileRequest> | undefined, b: ReceiveFileRequest | PlainMessage<ReceiveFileRequest> | undefined): boolean {
    return proto3.util.equals(ReceiveFileRequest, a, b);
  }
}

/**
 * @generated from message proto.fawa.file.v1.ReceiveFileResponse
 */
export class ReceiveFileResponse extends Message<ReceiveFileResponse> {
  /**
   * @generated from oneof proto.fawa.file.v1.ReceiveFileResponse.payload
   */
  payload: {
    /**
     * @generated from field: int64 file_size = 1;
     */
    value: bigint;
    case: "fileSize";
  } | {
    /**
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ReceiveFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.fawa.file.v1.ReceiveFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_size", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "payload" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceiveFileResponse {
    return new ReceiveFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceiveFileResponse {
    return new ReceiveFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceiveFileResponse {
    return new ReceiveFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReceiveFileResponse | PlainMessage<ReceiveFileResponse> | undefined, b: ReceiveFileResponse | PlainMessage<ReceiveFileResponse> | undefined): boolean {
    return proto3.util.equals(ReceiveFileResponse, a, b);
  }
}

